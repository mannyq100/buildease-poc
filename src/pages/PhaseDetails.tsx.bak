import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Calendar,
  Users,
  DollarSign,
  Package,
  Clock,
  ArrowRight,
  AlertCircle,
  CheckCircle2,
  FileText,
  ChevronRight,
  Plus,
  Sparkles,
  Building,
  ArrowUpRight,
  Bell,
  BarChart3,
  ShieldAlert,
  Clipboard,
  TrendingUp,
  Calendar as CalendarIcon,
  Settings,
  MoreVertical
} from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { LazyMotion, domAnimation, m } from 'framer-motion';
import { cn } from '@/lib/utils';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// Import our new components
import {
  PhaseHeader,
  PhaseTabs,
  MetricCard,
  TaskItem,
  MaterialItem,
  InsightItem
} from '@/components/phases';

const PhaseDetails = () => {
  const navigate = useNavigate();
  const [isDarkMode, setIsDarkMode] = useState(false);
  
  // Check dark mode on component mount and whenever it might change
  useEffect(() => {
    const checkDarkMode = () => {
      setIsDarkMode(document.documentElement.classList.contains('dark'));
    };
    
    // Check on mount
    checkDarkMode();
    
    // Set up a mutation observer to watch for dark mode changes
    const observer = new MutationObserver(checkDarkMode);
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
    
    // Clean up observer on unmount
    return () => observer.disconnect();
  }, []);

  return (
    <div className={cn(
      "min-h-screen transition-colors",
      isDarkMode ? "bg-slate-900" : "bg-gray-50"
    )}>
      {/* Header with Gradient Background */}
      <PhaseHeader
        phaseName="Foundation Phase"
        phaseStatus="In Progress"
        projectName="Villa Construction"
        startDate="Feb 2"
        endDate="Mar 15, 2024"
        durationWeeks={6}
        progress={65}
        onNavigateToProject={() => navigate("/project/1")}
      />

      {/* Main Content */}
      <PhaseTabs defaultValue="overview">
        <TabsContent value="overview" className="mt-6 space-y-6">
          <div className="grid gap-4">
            {/* Phase Stats */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <MetricCard 
                icon={<Calendar className="w-5 h-5 text-blue-600 dark:text-blue-400" />}
                label="Duration"
                value="6 Weeks"
                subtext="2 weeks remaining"
                trend="normal"
              />
              <MetricCard 
                icon={<Users className="w-5 h-5 text-blue-600 dark:text-blue-400" />}
                label="Team Size"
                value="8 Members"
                subtext="2 contractors, 6 workers"
                trend="normal"
              />
              <MetricCard 
                icon={<DollarSign className="w-5 h-5 text-blue-600 dark:text-blue-400" />}
                label="Budget"
                value="$45,000"
                subtext="$28,500 spent"
                trend="positive"
              />
            </div>
            
            {/* Critical Items & Dependencies */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card className={cn(
                isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
              )}>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg font-medium flex items-center">
                    <AlertCircle className="mr-2 h-5 w-5 text-amber-500" />
                    Critical Items
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <CriticalItem 
                    title="Soil Compaction Test" 
                    deadline="Feb 18" 
                    status="pending" 
                  />
                  <CriticalItem 
                    title="Foundation Inspection" 
                    deadline="Feb 25" 
                    status="not-started" 
                  />
                  <CriticalItem 
                    title="Plumbing Rough-in" 
                    deadline="Mar 5" 
                    status="not-started" 
                  />
                </CardContent>
              </Card>

              <Card className={cn(
                isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
              )}>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg font-medium flex items-center">
                    <Package className="mr-2 h-5 w-5 text-blue-500" />
                    Dependencies
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <DependencyItem 
                    title="Architectural Drawings v2.1" 
                    status="completed" 
                    type="document" 
                  />
                  <DependencyItem 
                    title="Concrete Delivery" 
                    status="scheduled" 
                    type="material" 
                  />
                  <DependencyItem 
                    title="City Permit Approval" 
                    status="in-progress" 
                    type="approval" 
                  />
                </CardContent>
              </Card>
            </div>
            
            {/* Tasks Overview & Insights */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="md:col-span-2">
                <Card className={cn(
                  isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
                )}>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <CheckCircle2 className="mr-2 h-5 w-5 text-green-500" />
                      Tasks Overview
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <TaskItem 
                      title="Site Clearing and Excavation" 
                      status="completed" 
                      progress={100} 
                      assignees={4} 
                      deadline="Completed Feb 8" 
                    />
                    <TaskItem 
                      title="Footing and Foundation Forms" 
                      status="in-progress" 
                      progress={75}
                      assignees={6}
                      deadline="Due Feb 22"
                    />
                    <TaskItem 
                      title="Concrete Pouring" 
                      status="pending" 
                      progress={0}
                      assignees={8}
                      deadline="Due Mar 1"
                    />
                  </CardContent>
                </Card>
              </div>
              
              <div>
                <Card className={cn(
                  isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
                )}>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <Sparkles className="mr-2 h-5 w-5 text-blue-500" />
                      Insights
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <InsightItem 
                      title="Weather Impact" 
                      description="Upcoming rainy forecast may delay concrete pouring by 2-3 days." 
                    />
                    <InsightItem 
                      title="Resource Optimization" 
                      description="Team can be reduced to 4 members during the curing period to optimize resources." 
                    />
                    <InsightItem 
                      title="Budget Tracking" 
                      description="Current spending is 3% under budget projection for this phase." 
                    />
                  </CardContent>
                </Card>
              </div>
            </div>
            
            {/* Materials */}
            <Card className={cn(
              isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
            )}>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg font-medium flex items-center justify-between">
                  <span className="flex items-center">
                    <Package className="mr-2 h-5 w-5 text-amber-500" />
                    Key Materials
                  </span>
                  <Button variant="ghost" size="sm" className="text-blue-500 dark:text-blue-400">
                    View All <ChevronRight className="ml-1 h-4 w-4" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                  <MaterialItem 
                    name="Portland Cement" 
                    quantity="120 bags" 
                    used={40} 
                    status="in-stock" 
                  />
                  <MaterialItem 
                    name="Reinforcing Steel" 
                    quantity="2.5 tons" 
                    used={65} 
                    status="low-stock" 
                  />
                  <MaterialItem 
                    name="Insulation Sheets" 
                    quantity="250 sq ft" 
                    used={0} 
                    status="ordered" 
                  />
                  <MaterialItem 
                    name={'Aggregate (3/4")'}
                    quantity="40 cubic yards"
                    used={30}
                    status="in-stock" 
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="tasks" className="mt-6 space-y-6">
          <div className="grid gap-4">
            <Card className={cn(
              isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
            )}>
              <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
                <CardTitle className="text-lg font-medium">
                  Active Tasks
                </CardTitle>
                <Button size="sm">
                  <Plus className="mr-1 h-4 w-4" />
                  Add Task
                </Button>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <TaskCard 
                    title="Site Preparation" 
                    description="Clear the construction site and prepare for foundation work" 
                    dueDate="Feb 10" 
                    status="completed" 
                    progress={100} 
                    assignedTo={["JM", "RK", "AL"]} 
                  />
                  
                  <TaskCard 
                    title="Excavation" 
                    description="Excavate the foundation area according to architectural plans" 
                    dueDate="Feb 15" 
                    status="completed" 
                    progress={100} 
                    assignedTo={["RK", "PT", "AL"]} 
                  />
                  
                  <TaskCard 
                    title="Form Building" 
                    description="Construct forms for concrete pouring" 
                    dueDate="Feb 22" 
                    status="in-progress" 
                    progress={75} 
                    assignedTo={["JM", "AL", "MS"]} 
                  />
                  
                  <TaskCard 
                    title="Rebar Installation" 
                    description="Install reinforcing steel bars in foundation forms" 
                    dueDate="Feb 25" 
                    status="in-progress" 
                    progress={60} 
                    assignedTo={["RK", "MS", "JD"]} 
                  />
                  
                  <TaskCard 
                    title="Concrete Pouring" 
                    description="Pour concrete into foundation forms" 
                    dueDate="Mar 05" 
                    status="pending" 
                    progress={0} 
                    assignedTo={["JM", "RK", "MS", "PT", "AL"]} 
                  />
                  
                  <TaskCard 
                    title="Curing and Inspection" 
                    description="Ensure proper curing of concrete and schedule inspection" 
                    dueDate="Mar 12" 
                    status="pending" 
                    progress={0} 
                    assignedTo={["JM", "JD"]} 
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="materials" className="mt-6 space-y-6">
          <div className="grid gap-4">
            <Card className={cn(
              isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
            )}>
              <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
                <CardTitle className="text-lg font-medium">
                  Materials Inventory
                </CardTitle>
                <Button size="sm">
                  <Plus className="mr-1 h-4 w-4" />
                  Add Material
                </Button>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <MaterialCard 
                    name="Portland Cement"
                    supplier="BuildPro Supplies"
                    quantity="120 bags"
                    status="in-stock"
                  />
                  
                  <MaterialCard 
                    name="Reinforcing Steel"
                    supplier="Metro Metals"
                    quantity="2.5 tons"
                    status="low-stock"
                  />
                  
                  <MaterialCard 
                    name={'Aggregate (3/4")'}
                    supplier="Stone Quarry Inc."
                    quantity="40 cubic yards"
                    status="in-stock"
                  />
                  
                  <MaterialCard 
                    name="Insulation Sheets"
                    supplier="ThermalPro"
                    quantity="250 sq ft"
                    status="ordered"
                  />
                  
                  <MaterialCard 
                    name="Waterproofing Membrane"
                    supplier="WaterShield Co."
                    quantity="300 sq ft"
                    status="in-stock"
                  />
                  
                  <MaterialCard 
                    name="Drainage Pipes"
                    supplier="PlumbTech"
                    quantity="120 linear ft"
                    status="in-stock"
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="documents" className="mt-6 space-y-6">
          <div className="grid gap-4">
            <Card className={cn(
              isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
            )}>
              <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
                <CardTitle className="text-lg font-medium">
                  Phase Documents
                </CardTitle>
                <Button size="sm">
                  <Plus className="mr-1 h-4 w-4" />
                  Upload Document
                </Button>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <DocumentItem 
                    name="Foundation Blueprint"
                    type="PDF"
                    date="Jan 28, 2024"
                    size="4.2 MB"
                    status="current"
                  />
                  
                  <DocumentItem 
                    name="Soil Analysis Report"
                    type="PDF"
                    date="Jan 30, 2024"
                    size="2.8 MB"
                    status="current"
                  />
                  
                  <DocumentItem 
                    name="Material Specifications"
                    type="XLSX"
                    date="Feb 05, 2024"
                    size="1.1 MB"
                    status="current"
                  />
                  
                  <DocumentItem 
                    name="Foundation Checklist"
                    type="PDF"
                    date="Feb 10, 2024"
                    size="0.9 MB"
                    status="current"
                  />
                  
                  <DocumentItem 
                    name="City Permit Application"
                    type="PDF"
                    date="Jan 15, 2024"
                    size="3.4 MB"
                    status="approved"
                  />
                  
                  <DocumentItem 
                    name="Structural Engineer Report"
                    type="PDF"
                    date="Jan 22, 2024"
                    size="5.7 MB"
                    status="current"
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </PhaseTabs>
    </div>
  );
};

// Enhanced critical item component
const CriticalItem = ({ title, deadline, status }) => {
  const isDarkMode = document.documentElement.classList.contains('dark');
  
  const statusClasses = {
    completed: isDarkMode ? "text-green-400" : "text-green-600",
    pending: isDarkMode ? "text-amber-400" : "text-amber-600",
    'not-started': isDarkMode ? "text-slate-400" : "text-slate-600",
    overdue: isDarkMode ? "text-red-400" : "text-red-600"
  };
  
  return (
    <LazyMotion features={domAnimation}>
      <m.div 
      whileHover={{ x: 2 }}
      className={cn(
        "flex justify-between items-center p-3 rounded-md",
        isDarkMode ? "hover:bg-slate-700/50" : "hover:bg-gray-50"
      )}
    >
      <div className="flex items-center">
        <div className={cn(
          "w-2 h-2 rounded-full mr-3",
          status === 'completed' ? "bg-green-500" :
          status === 'pending' ? "bg-amber-500" :
          status === 'overdue' ? "bg-red-500" :
          "bg-gray-500"
        )} />
        <span className={isDarkMode ? "text-white" : "text-slate-800"}>{title}</span>
      </div>
      <div className="flex items-center space-x-1">
        <Calendar className={cn("w-3.5 h-3.5", statusClasses[status])} />
        <span className={cn("text-sm", statusClasses[status])}>{deadline}</span>
      </div>
    </m.div>
    </LazyMotion>
  );
};

// Enhanced dependency item component
const DependencyItem = ({ title, status, type }) => {
  const isDarkMode = document.documentElement.classList.contains('dark');
  
  const statusColors = {
    completed: isDarkMode ? "bg-green-900/30 text-green-400 border-green-700/50" : "bg-green-100 text-green-600 border-green-200",
    scheduled: isDarkMode ? "bg-blue-900/30 text-blue-400 border-blue-700/50" : "bg-blue-100 text-blue-600 border-blue-200",
    'in-progress': isDarkMode ? "bg-amber-900/30 text-amber-400 border-amber-700/50" : "bg-amber-100 text-amber-600 border-amber-200",
    blocked: isDarkMode ? "bg-red-900/30 text-red-400 border-red-700/50" : "bg-red-100 text-red-600 border-red-200",
  };
  
  const typeIcons = {
    document: <FileText className="w-3.5 h-3.5 mr-1.5" />,
    material: <Package className="w-3.5 h-3.5 mr-1.5" />,
    approval: <CheckCircle2 className="w-3.5 h-3.5 mr-1.5" />,
  };
  
  return (
    <LazyMotion features={domAnimation}>
      <m.div 
      whileHover={{ x: 2 }}
      className={cn(
        "flex justify-between items-center p-3 rounded-md",
        isDarkMode ? "hover:bg-slate-700/50" : "hover:bg-gray-50"
      )}
    >
      <div className="flex items-center">
        {typeIcons[type]}
        <span className={isDarkMode ? "text-white" : "text-slate-800"}>{title}</span>
      </div>
      <Badge className={statusColors[status]}>
        {status}
      </Badge>
    </m.div>
    </LazyMotion>
  );
};

const TaskCard = ({ title, description, dueDate, status, progress, assignedTo }) => {
  const isDarkMode = document.documentElement.classList.contains('dark');
  
  return (
    <LazyMotion features={domAnimation}>
      <m.div whileHover={{ y: -5 }} transition={{ duration: 0.2 }}>
        <Card className={cn(
          "relative overflow-hidden border transition-all duration-300 shadow-sm hover:shadow-md",
          status === 'completed' ? (isDarkMode ? "border-l-4 border-l-green-500" : "border-l-4 border-l-green-500") :
          status === 'in-progress' ? (isDarkMode ? "border-l-4 border-l-blue-500" : "border-l-4 border-l-blue-500") :
          status === 'delayed' ? (isDarkMode ? "border-l-4 border-l-red-500" : "border-l-4 border-l-red-500") :
          (isDarkMode ? "border-l-4 border-l-gray-500" : "border-l-4 border-l-gray-500")
        )}>
          <CardContent className="p-4">
            <div className="flex justify-between items-start mb-2">
              <h3 className={cn("font-medium", isDarkMode ? "text-white" : "text-gray-900")}>{title}</h3>
              <Badge className={cn(
                status === 'completed' ? (isDarkMode ? "bg-green-600" : "bg-green-100 text-green-800") :
                status === 'in-progress' ? (isDarkMode ? "bg-blue-600" : "bg-blue-100 text-blue-800") :
                status === 'delayed' ? (isDarkMode ? "bg-red-600" : "bg-red-100 text-red-800") :
                (isDarkMode ? "bg-gray-600" : "bg-gray-100 text-gray-800")
              )}>
                {status}
              </Badge>
            </div>
            <p className={cn("text-sm mb-3", isDarkMode ? "text-gray-300" : "text-gray-600")}>{description}</p>
            <div className="flex justify-between items-center text-xs mb-2">
              <div className={cn(isDarkMode ? "text-gray-400" : "text-gray-500")}>
                <Calendar className="w-3 h-3 inline mr-1" />
                Due {dueDate}
              </div>
              <div>{progress}% Complete</div>
            </div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mb-4">
              <div 
                className={cn(
                  "h-full rounded-full",
                  status === 'completed' ? "bg-green-500" :
                  status === 'in-progress' ? "bg-blue-500" :
                  status === 'delayed' ? "bg-red-500" :
                  "bg-gray-500"
                )} 
                style={{ width: `${progress}%` }}
              />
            </div>
            <div className="flex justify-between items-center">
              <div className="flex -space-x-2">
                {assignedTo.slice(0, 3).map((person, i) => (
                  <Avatar key={i} className="border-2 border-white dark:border-slate-800 h-6 w-6">
                    <AvatarFallback className="bg-blue-500 text-xs text-white">{person}</AvatarFallback>
                  </Avatar>
                ))}
                {assignedTo.length > 3 && (
                  <Avatar className="border-2 border-white dark:border-slate-800 h-6 w-6">
                    <AvatarFallback className="bg-gray-500 text-xs text-white">+{assignedTo.length - 3}</AvatarFallback>
                  </Avatar>
                )}
              </div>
              <Button size="sm" variant="ghost" className="h-7 w-7 p-0 rounded-full">
                <MoreVertical className="h-4 w-4" />
              </Button>
            </div>
          </CardContent>
        </Card>
      </m.div>
    </LazyMotion>
  );
};

const MaterialCard = ({ name, supplier, quantity, status }) => {
  const isDarkMode = document.documentElement.classList.contains('dark');

  return (
    <LazyMotion features={domAnimation}>
      <m.div whileHover={{ y: -5 }} transition={{ duration: 0.2 }}>
        <Card className={cn(
          "border transition-all duration-300 shadow-sm hover:shadow-md",
          isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
        )}>
          <CardContent className="p-4">
            <div className="flex justify-between items-start">
              <h3 className={cn("font-medium", isDarkMode ? "text-white" : "text-gray-900")}>{name}</h3>
              <Badge className={cn(
                status === 'in-stock' ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400" :
                status === 'low-stock' ? "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400" :
                status === 'out-of-stock' ? "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400" :
                status === 'ordered' ? "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400" :
                "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400"
              )}>
                {status}
              </Badge>
            </div>
            <p className={cn("text-sm mt-1", isDarkMode ? "text-gray-400" : "text-gray-500")}>
              {supplier}
            </p>
            <div className="mt-3 flex items-center justify-between">
              <div className={cn("text-sm font-medium", isDarkMode ? "text-white" : "text-gray-900")}>
                {quantity}
              </div>
              <Button variant="ghost" size="sm" className="text-blue-600 dark:text-blue-400 p-0 h-8">
                <Package className="w-4 h-4 mr-1" />
                Manage
              </Button>
            </div>
          </CardContent>
        </Card>
      </m.div>
    </LazyMotion>
  );
};

const TeamMemberCard = ({ name, role, status }) => {
  const isDarkMode = document.documentElement.classList.contains('dark');
  
  return (
    <LazyMotion features={domAnimation}>
      <m.div whileHover={{ y: -5 }} transition={{ duration: 0.2 }}>
        <Card className={cn(
          "border transition-all duration-300 shadow-sm hover:shadow-md",
          isDarkMode ? "bg-slate-800 border-slate-700" : "bg-white border-gray-200"
        )}>
          <CardContent className="p-4 flex items-center space-x-4">
            <Avatar className="h-10 w-10">
              <AvatarFallback className="bg-blue-500 text-white">{name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <h3 className={cn("font-medium", isDarkMode ? "text-white" : "text-gray-900")}>{name}</h3>
              <p className={cn("text-sm", isDarkMode ? "text-gray-400" : "text-gray-500")}>{role}</p>
            </div>
            <Badge className={cn(
              status === 'available' ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400" :
              status === 'on-site' ? "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400" :
              "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400"
            )}>
              {status}
            </Badge>
          </CardContent>
        </Card>
      </m.div>
    </LazyMotion>
  );
};

const CommentItem = ({ author, timestamp, description }) => {
  const isDarkMode = document.documentElement.classList.contains('dark');
  
  return (
    <div className="flex space-x-3 pb-4">
      <Avatar className="h-8 w-8">
        <AvatarFallback className="bg-blue-500 text-white text-xs">{author.split(' ').map(n => n[0]).join('')}</AvatarFallback>
      </Avatar>
      <div>
        <div className="flex items-baseline">
          <h4 className={cn("font-medium text-sm", isDarkMode ? "text-white" : "text-gray-900")}>{author}</h4>
          <span className={cn("text-xs ml-2", isDarkMode ? "text-gray-400" : "text-gray-500")}>{timestamp}</span>
        </div>
        <p className={cn("text-sm mt-1", isDarkMode ? "text-gray-300" : "text-gray-600")}>{description}</p>
      </div>
    </div>
  );
};

const ProgressItem = ({ date, title, description, progress }) => {
  const isDarkMode = document.documentElement.classList.contains('dark');
  
  return (
    <div className="relative pb-8">
      <div className="absolute top-5 left-5 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-700"></div>
      <div className="relative flex items-start">
        <div className="flex items-center justify-center bg-blue-500 rounded-full h-10 w-10 flex-shrink-0">
          <span className="text-white text-xs">{progress}%</span>
        </div>
        <div className="ml-4">
          <div className={cn("text-xs", isDarkMode ? "text-gray-400" : "text-gray-500")}>{date}</div>
          <div className={cn("font-medium mt-1", isDarkMode ? "text-white" : "text-gray-900")}>{title}</div>
          <div className={cn("text-sm mt-1", isDarkMode ? "text-gray-300" : "text-gray-600")}>{description}</div>
        </div>
      </div>
    </div>
  );
};

const DocumentItem = ({ name, type, date, size, status }) => {
  const isDarkMode = document.documentElement.classList.contains('dark');
  
  const iconMap = {
    'PDF': <FileText className="h-4 w-4 text-red-500" />,
    'DOCX': <FileText className="h-4 w-4 text-blue-500" />,
    'XLSX': <FileText className="h-4 w-4 text-green-500" />,
    'DWG': <FileText className="h-4 w-4 text-purple-500" />
  };
  
  return (
    <LazyMotion features={domAnimation}>
      <m.div 
      whileHover={{ x: 2 }}
      className={cn(
        "flex items-center justify-between py-3 px-4 rounded-md",
        isDarkMode ? "hover:bg-slate-700" : "hover:bg-gray-50"
      )}
    >
      <div className="flex items-center space-x-3">
        {iconMap[type] || <FileText className="h-4 w-4 text-gray-500" />}
        <div>
          <div className={cn(
            "font-medium",
            isDarkMode ? "text-white" : "text-gray-900"
          )}>{name}</div>
          <div className={cn(
            "text-xs flex items-center space-x-2",
            isDarkMode ? "text-gray-400" : "text-gray-500"
          )}>
            <span>{type}</span>
            <span>•</span>
            <span>{date}</span>
            <span>•</span>
            <span>{size}</span>
          </div>
        </div>
      </div>
      <div className="flex items-center space-x-2">
        <Badge className={cn(
          status === 'approved' ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400" :
          status === 'pending' ? "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400" :
          "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400"
        )}>
          {status}
        </Badge>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button size="icon" variant="ghost" className="h-8 w-8">
                <ArrowUpRight className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Open document</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>
    </m.div>
    </LazyMotion>
  );
};

export default PhaseDetails;